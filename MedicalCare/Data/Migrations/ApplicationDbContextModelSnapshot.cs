// <auto-generated />
using MedicalCare.Data;
using MedicalCare.Models.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace MedicalCare.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MedicalCare.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("ConfirmPassword");

                    b.Property<string>("DoctorReg");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("EmployeeReg");

                    b.Property<int>("EntityStatus");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("MobileNo")
                        .IsRequired();

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("OtherName");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PatientReg");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("ProfilePicture");

                    b.Property<string>("RegisteredBy");

                    b.Property<string>("SecurityStamp");

                    b.Property<int>("Sex");

                    b.Property<string>("SurName")
                        .IsRequired();

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("MedicalCare.Models.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<int>("Status");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("MedicalCare.Models.Entities.Accountants", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<string>("EmailAddress")
                        .IsRequired();

                    b.Property<string>("EmployeeReg");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("MobileNo")
                        .IsRequired();

                    b.Property<string>("OtherName");

                    b.Property<string>("PhoneNo");

                    b.Property<string>("ProfilePicture");

                    b.Property<int>("Sex");

                    b.Property<int>("Status");

                    b.Property<string>("SurName")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Accountants");
                });

            modelBuilder.Entity("MedicalCare.Models.Entities.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("AppointmentDate");

                    b.Property<int?>("DepartmentId");

                    b.Property<int>("DeptId");

                    b.Property<int>("DoctorId");

                    b.Property<string>("Problem");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DoctorId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("MedicalCare.Models.Entities.Bed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BedCatId");

                    b.Property<int?>("BedCategoryId");

                    b.Property<string>("Capacity")
                        .IsRequired();

                    b.Property<string>("Charge")
                        .IsRequired();

                    b.Property<string>("Description");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("BedCategoryId");

                    b.ToTable("Beds");
                });

            modelBuilder.Entity("MedicalCare.Models.Entities.BedAllotment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AlotmentTime");

                    b.Property<int>("BedCatId");

                    b.Property<int?>("BedCategoryId");

                    b.Property<int>("Day");

                    b.Property<string>("Description");

                    b.Property<DateTime>("DischargTime");

                    b.Property<int>("PatientId");

                    b.Property<int>("Status");

                    b.Property<int>("Total");

                    b.HasKey("Id");

                    b.HasIndex("BedCategoryId");

                    b.HasIndex("PatientId");

                    b.ToTable("BedAllotments");
                });

            modelBuilder.Entity("MedicalCare.Models.Entities.BedCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BedName");

                    b.Property<int>("BedNumber");

                    b.Property<string>("Description");

                    b.HasKey("Id");

                    b.ToTable("BedCategory");
                });

            modelBuilder.Entity("MedicalCare.Models.Entities.BloodBank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Age");

                    b.Property<int>("BloodGpId");

                    b.Property<int?>("BloodGroupId");

                    b.Property<DateTime>("LastDonationDate");

                    b.Property<int>("Sex");

                    b.HasKey("Id");

                    b.HasIndex("BloodGroupId");

                    b.ToTable("BloodBank");
                });

            modelBuilder.Entity("MedicalCare.Models.Entities.BloodGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("BloodGroup");
                });

            modelBuilder.Entity("MedicalCare.Models.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DeptName")
                        .IsRequired();

                    b.Property<string>("Description");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("MedicalCare.Models.Entities.Diagnosis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Instruction");

                    b.Property<string>("Name");

                    b.Property<int?>("PresId");

                    b.Property<int?>("PrescriptionId");

                    b.HasKey("Id");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("Diagnosis");
                });

            modelBuilder.Entity("MedicalCare.Models.Entities.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<string>("Biography");

                    b.Property<int?>("BloodGroupId");

                    b.Property<int?>("DepartmentId");

                    b.Property<int?>("DeptId");

                    b.Property<string>("Designation");

                    b.Property<string>("DoctorReg");

                    b.Property<string>("Education");

                    b.Property<string>("EmailAddress")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("MobileNo")
                        .IsRequired();

                    b.Property<string>("OtherName");

                    b.Property<string>("PhoneNo");

                    b.Property<string>("ProfilePicture");

                    b.Property<int>("Sex");

                    b.Property<string>("Specialist");

                    b.Property<int>("Status");

                    b.Property<string>("SurName")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("BloodGroupId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("Doctor");
                });

            modelBuilder.Entity("MedicalCare.Models.Entities.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<int?>("DoctorId")
                        .IsRequired();

                    b.Property<string>("File")
                        .IsRequired();

                    b.Property<int?>("PateintId")
                        .IsRequired();

                    b.Property<int?>("PatientId");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("MedicalCare.Models.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<string>("EmailAddress")
                        .IsRequired();

                    b.Property<string>("EmployeeReg");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("MobileNo")
                        .IsRequired();

                    b.Property<string>("OtherName");

                    b.Property<string>("PhoneNo");

                    b.Property<string>("ProfilePicture");

                    b.Property<int>("Sex");

                    b.Property<int>("Status");

                    b.Property<string>("SurName")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("MedicalCare.Models.Entities.Enquiries", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("Date");

                    b.Property<string>("Enquiry");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Enquiries");
                });

            modelBuilder.Entity("MedicalCare.Models.Entities.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Discount");

                    b.Property<decimal>("Due");

                    b.Property<DateTime>("EndDate");

                    b.Property<decimal>("GrandTotal");

                    b.Property<string>("HasChild");

                    b.Property<decimal>("Paid");

                    b.Property<int?>("PatientId");

                    b.Property<DateTime>("StartDate");

                    b.Property<decimal>("Total");

                    b.Property<decimal>("Vat");

                    b.Property<string>("invoiceNumber");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("MedicalCare.Models.Entities.InvoiceLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AccountId");

                    b.Property<int?>("AcctId");

                    b.Property<string>("Description");

                    b.Property<int?>("InvoiceId");

                    b.Property<decimal>("Price");

                    b.Property<int>("Quantity");

                    b.Property<decimal>("SubTotal");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("InvoiceId");

                    b.ToTable("InvoiceLines");
                });

            modelBuilder.Entity("MedicalCare.Models.Entities.Laboratorist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<string>("EmailAddress")
                        .IsRequired();

                    b.Property<string>("EmployeeReg");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("MobileNo")
                        .IsRequired();

                    b.Property<string>("OtherName");

                    b.Property<string>("PhoneNo");

                    b.Property<string>("ProfilePicture");

                    b.Property<int>("Sex");

                    b.Property<int>("Status");

                    b.Property<string>("SurName")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Laboratorists");
                });

            modelBuilder.Entity("MedicalCare.Models.Entities.Medicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("ManufacturedBy");

                    b.Property<int>("MedCatId");

                    b.Property<int?>("MedicineCategoryId");

                    b.Property<string>("Name");

                    b.Property<double>("Price");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("MedicineCategoryId");

                    b.ToTable("Medicines");
                });

            modelBuilder.Entity("MedicalCare.Models.Entities.MedicineCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("MedicineCategory");
                });

            modelBuilder.Entity("MedicalCare.Models.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<int>("ReadStatus");

                    b.Property<int>("ReceiverId");

                    b.Property<int>("SenderId");

                    b.Property<int>("Status");

                    b.Property<string>("Subject");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("MedicalCare.Models.Entities.NoticeBoard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<DateTimeOffset>("EndDate");

                    b.Property<DateTimeOffset>("StartDate");

                    b.Property<int>("Status");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("NoticeBoard");
                });

            modelBuilder.Entity("MedicalCare.Models.Entities.Nurse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<string>("EmailAddress")
                        .IsRequired();

                    b.Property<string>("EmployeeReg");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("MobileNo")
                        .IsRequired();

                    b.Property<string>("OtherName");

                    b.Property<string>("PhoneNo");

                    b.Property<string>("ProfilePicture");

                    b.Property<int>("Sex");

                    b.Property<int>("Status");

                    b.Property<string>("SurName")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Nurse");
                });

            modelBuilder.Entity("MedicalCare.Models.Entities.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<int?>("BloodGroupId");

                    b.Property<string>("DOB");

                    b.Property<string>("EmailAddress")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("MobileNo")
                        .IsRequired();

                    b.Property<string>("OtherName");

                    b.Property<string>("PatientReg");

                    b.Property<string>("PhoneNo");

                    b.Property<string>("ProfilePicture");

                    b.Property<int>("Sex");

                    b.Property<int>("Status");

                    b.Property<string>("SurName")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("BloodGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("MedicalCare.Models.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AccountId");

                    b.Property<int>("AcctId");

                    b.Property<double>("Ammount");

                    b.Property<DateTimeOffset>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("PayTo");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("MedicalCare.Models.Entities.Pharmacist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<string>("EmailAddress")
                        .IsRequired();

                    b.Property<string>("EmployeeReg");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("MobileNo")
                        .IsRequired();

                    b.Property<string>("OtherName");

                    b.Property<string>("PhoneNo");

                    b.Property<string>("ProfilePicture");

                    b.Property<int>("Sex");

                    b.Property<int>("Status");

                    b.Property<string>("SurName")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Pharmacists");
                });

            modelBuilder.Entity("MedicalCare.Models.Entities.Prescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BloodPressure");

                    b.Property<string>("CaseStudy");

                    b.Property<DateTime>("Date");

                    b.Property<int?>("DoctorId");

                    b.Property<int?>("PatientId");

                    b.Property<string>("PatientNote");

                    b.Property<string>("Reference");

                    b.Property<string>("VisitingFees");

                    b.Property<string>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("MedicalCare.Models.Entities.PrescriptionLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Days");

                    b.Property<string>("Instruction");

                    b.Property<int?>("MedCatId");

                    b.Property<int?>("MedicineCategoryId");

                    b.Property<int?>("MedicineId");

                    b.Property<int?>("PresId");

                    b.Property<int?>("PrescriptionId");

                    b.HasKey("Id");

                    b.HasIndex("MedicineCategoryId");

                    b.HasIndex("MedicineId");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("PrescriptionMedicine");
                });

            modelBuilder.Entity("MedicalCare.Models.Entities.Receptionist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<string>("EmailAddress")
                        .IsRequired();

                    b.Property<string>("EmployeeReg");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("MobileNo")
                        .IsRequired();

                    b.Property<string>("OtherName");

                    b.Property<string>("PhoneNo");

                    b.Property<string>("ProfilePicture");

                    b.Property<int>("Sex");

                    b.Property<int>("Status");

                    b.Property<string>("SurName")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Receptionists");
                });

            modelBuilder.Entity("MedicalCare.Models.Entities.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.Property<int>("DoctorId");

                    b.Property<int>("PatientId");

                    b.Property<string>("Picture");

                    b.Property<int>("ReportType");

                    b.Property<int>("Status");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("MedicalCare.Models.Entities.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DoctorId");

                    b.Property<DateTimeOffset>("EndDate");

                    b.Property<DateTimeOffset>("PatientTime");

                    b.Property<DateTimeOffset>("StartDate");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("MedicalCare.Models.Entities.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationTitle");

                    b.Property<string>("Currency");

                    b.Property<string>("EmailAddress");

                    b.Property<string>("Favicon");

                    b.Property<string>("Initial");

                    b.Property<string>("Logo");

                    b.Property<string>("PhoneNo");

                    b.HasKey("Id");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MedicalCare.Models.Entities.Accountants", b =>
                {
                    b.HasOne("MedicalCare.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MedicalCare.Models.Entities.Appointment", b =>
                {
                    b.HasOne("MedicalCare.Models.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("MedicalCare.Models.Entities.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MedicalCare.Models.Entities.Bed", b =>
                {
                    b.HasOne("MedicalCare.Models.Entities.BedCategory", "BedCategory")
                        .WithMany()
                        .HasForeignKey("BedCategoryId");
                });

            modelBuilder.Entity("MedicalCare.Models.Entities.BedAllotment", b =>
                {
                    b.HasOne("MedicalCare.Models.Entities.BedCategory", "BedCategory")
                        .WithMany()
                        .HasForeignKey("BedCategoryId");

                    b.HasOne("MedicalCare.Models.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MedicalCare.Models.Entities.BloodBank", b =>
                {
                    b.HasOne("MedicalCare.Models.Entities.BloodGroup", "BloodGroup")
                        .WithMany()
                        .HasForeignKey("BloodGroupId");
                });

            modelBuilder.Entity("MedicalCare.Models.Entities.Diagnosis", b =>
                {
                    b.HasOne("MedicalCare.Models.Entities.Prescription", "Prescription")
                        .WithMany("Diagnosis")
                        .HasForeignKey("PrescriptionId");
                });

            modelBuilder.Entity("MedicalCare.Models.Entities.Doctor", b =>
                {
                    b.HasOne("MedicalCare.Models.Entities.BloodGroup", "BloodGroup")
                        .WithMany()
                        .HasForeignKey("BloodGroupId");

                    b.HasOne("MedicalCare.Models.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("MedicalCare.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MedicalCare.Models.Entities.Document", b =>
                {
                    b.HasOne("MedicalCare.Models.Entities.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MedicalCare.Models.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");
                });

            modelBuilder.Entity("MedicalCare.Models.Entities.Employee", b =>
                {
                    b.HasOne("MedicalCare.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MedicalCare.Models.Entities.Enquiries", b =>
                {
                    b.HasOne("MedicalCare.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MedicalCare.Models.Entities.Invoice", b =>
                {
                    b.HasOne("MedicalCare.Models.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");
                });

            modelBuilder.Entity("MedicalCare.Models.Entities.InvoiceLine", b =>
                {
                    b.HasOne("MedicalCare.Models.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.HasOne("MedicalCare.Models.Entities.Invoice", "Invoice")
                        .WithMany("InvoiceLine")
                        .HasForeignKey("InvoiceId");
                });

            modelBuilder.Entity("MedicalCare.Models.Entities.Laboratorist", b =>
                {
                    b.HasOne("MedicalCare.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MedicalCare.Models.Entities.Medicine", b =>
                {
                    b.HasOne("MedicalCare.Models.Entities.MedicineCategory", "MedicineCategory")
                        .WithMany()
                        .HasForeignKey("MedicineCategoryId");
                });

            modelBuilder.Entity("MedicalCare.Models.Entities.Message", b =>
                {
                    b.HasOne("MedicalCare.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MedicalCare.Models.Entities.Nurse", b =>
                {
                    b.HasOne("MedicalCare.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MedicalCare.Models.Entities.Patient", b =>
                {
                    b.HasOne("MedicalCare.Models.Entities.BloodGroup", "BloodGroup")
                        .WithMany()
                        .HasForeignKey("BloodGroupId");

                    b.HasOne("MedicalCare.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MedicalCare.Models.Entities.Payment", b =>
                {
                    b.HasOne("MedicalCare.Models.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");
                });

            modelBuilder.Entity("MedicalCare.Models.Entities.Pharmacist", b =>
                {
                    b.HasOne("MedicalCare.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MedicalCare.Models.Entities.Prescription", b =>
                {
                    b.HasOne("MedicalCare.Models.Entities.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("MedicalCare.Models.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");
                });

            modelBuilder.Entity("MedicalCare.Models.Entities.PrescriptionLine", b =>
                {
                    b.HasOne("MedicalCare.Models.Entities.MedicineCategory", "MedicineCategory")
                        .WithMany()
                        .HasForeignKey("MedicineCategoryId");

                    b.HasOne("MedicalCare.Models.Entities.Medicine", "Medicine")
                        .WithMany()
                        .HasForeignKey("MedicineId");

                    b.HasOne("MedicalCare.Models.Entities.Prescription", "Prescription")
                        .WithMany("PrescriptionLine")
                        .HasForeignKey("PrescriptionId");
                });

            modelBuilder.Entity("MedicalCare.Models.Entities.Receptionist", b =>
                {
                    b.HasOne("MedicalCare.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MedicalCare.Models.Entities.Report", b =>
                {
                    b.HasOne("MedicalCare.Models.Entities.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MedicalCare.Models.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MedicalCare.Models.Entities.Schedule", b =>
                {
                    b.HasOne("MedicalCare.Models.Entities.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MedicalCare.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MedicalCare.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MedicalCare.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MedicalCare.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
